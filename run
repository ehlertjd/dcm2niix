#! /bin/bash
#
#
CONTAINER='[scitran/dcm2niix]'
echo -e "$CONTAINER  running..."

##############################################################################
# Configure paths

FLYWHEEL_BASE=/flywheel/v0
OUTPUT_DIR=$FLYWHEEL_BASE/output
INPUT_DIR=$FLYWHEEL_BASE/input/dcm2niix_input
CONFIG_FILE=$FLYWHEEL_BASE/config.json
input_file=`find $INPUT_DIR/* -not -path '*/\.*' -type f | head -1` # Could be par/rec
dicom_dir='' # Initialize directory that will be sent to dcm2niix

##############################################################################
# Parse configuration

# If the config file does not exist (local run) then parse the config options
# and values from the manifest
if [[ ! -f $CONFIG_FILE ]]; then
  # Parse config file and cast the values to ENV Vars from manifest
  # (note default value is grabbed)
  CONFIG_FILE=$FLYWHEEL_BASE/manifest.json
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value.default)"' $CONFIG_FILE)

else
  # Parse config file and cast vals to ENV Vars from config (Flywheel gear run)
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value)"' $CONFIG_FILE)
fi

##############################################################################
# Handle DICOM archive

if [[ -z "$input_file" ]] ; then
  echo -e "$CONTAINER No input file was found!"
  exit 1
fi

# Depending on the input_file archive type, unzip, gunzip, or uncompressed
if [[ "$input_file" == *.zip ]] ; then

    echo "$CONTAINER  Unzipping $input_file"
    unzip -q "$input_file" -d $INPUT_DIR

    # Check for unzipped directory in input dir
    dicom_dir=$(find $INPUT_DIR/* -not -path '*/\.*' -type d | head -1)

    # Check for PAR/REC
    if [[ -z $dicom_dir ]]; then
        dicom_dir=$(find $INPUT_DIR/* -not -path '*/\.*' -type f -name "*.par" -o -name "*.PAR" | head -1)
    fi

    # DICOM files
    if [[ -z $dicom_dir ]]; then
        dicom_dir=$(find $INPUT_DIR/* -not -path '*/\.*' -type f | head -1)
    fi

elif [[ "$input_file" == *.gz ]]; then
    cd $INPUT_DIR
    echo "$CONTAINER  Gunzipping $input_file"
    gunzip -q "$input_file"
    dicom_dir=$(basename "$input_file" .gz)

else
    # Assume a directory containing dicoms was mounted in and pass it on
    dicom_dir=$INPUT_DIR
fi

##############################################################################
# Decompression of dicom files. For some types of DIOCM files a compression can
# be applied to the image data which will cause dcm2niix to fail. We use a method
# recommended by Rorden below to decompress these images prior to conversion. See:
# https://www.nitrc.org/plugins/mwiki/index.php/dcm2nii:MainPage#Transfer_Syntaxes_and_Compressed_Images

# Check config for decompress option
if [[ $config_decompress_dicoms == 'true' ]]; then

  # Get a list of the dicoms to be decompressed
  echo $dicom_dir
  dicom_files=$(find $dicom_dir -type f)

  # Decompress with gcdmconv
  echo -e "Decompressing DICOM files..."
  for d in $dicom_files; do
    gdcmconv --raw $d $d
    if [[ $? != 0 ]]; then
      echo -e "$CONTAINER Error decompressing dicoms!" && exit 1
    fi
  done
fi

##############################################################################
# Run the dcm2niix algorithm

dcm2niix -b ${config_bids_sidecar} \
         -m ${config_merge2d} \
         -t ${config_text_notes_private} \
         -x ${config_text_notes_private} \
         -z ${config_compress_nifti} \
         -f ${config_filename} \
         -o ${OUTPUT_DIR} \
         ${dicom_dir}

if [[ $? != 0 ]]; then
  echo -e "$CONTAINER Error converting dicoms! Exit status = $?"
  exit $?
fi

##############################################################################
# Check outputs/permissions and Exit

# Get a list of the files in the output directory
outputs=`find $OUTPUT_DIR -not -path '*/\.*' -type f -name "*nii*"`

# If output files exist, happily exit, if not exit 1.
if [[ -z "$outputs" ]] ; then
    echo "$CONTAINER  No results found in output directory... Exiting(1)!"
    exit 1
else
    chmod -R 777 $OUTPUT_DIR
    echo -e "$CONTAINER  Success! Wrote:\n`ls $OUTPUT_DIR`"
fi

exit 0
